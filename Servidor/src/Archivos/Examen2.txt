Pregunta 1-;Opcion 1;Opcion 2;Opcion 3;Opcion 4;+Opcion 2+}
¿Qué es la sobrecarga de métodos en Java?-;a. Tener varios métodos con el mismo nombre en una clase pero con diferentes firmas.;b. Heredar métodos de una clase padre.;c. Definir métodos en una interfaz.;d. Acceder a los métodos de otra clase usando this.;+a+}
¿Cómo se logra la implementación de la herencia múltiple en Java?-;a. Usando la palabra clave multiple en la declaración de clase.;b. Java no permite la herencia múltiple.;c. Implementando interfaces.;d. Declarando múltiples clases como padres en la declaración de clase.;+b+}
¿Cuál es el propósito de la palabra clave final en Java?-;a. Indica que un método no puede ser sobrescrito en una clase hija.;b. Indica que una variable no puede ser modificada después de su asignación.;c. Indica que una clase no puede ser heredada.;d. Todas las anteriores.;+d+}
¿Cuál es la diferencia entre una clase abstracta y una interfaz en Java?-;a. Una interfaz puede contener métodos con implementación, mientras que una clase abstracta no.;b. Una clase abstracta no puede tener atributos, pero una interfaz sí.;c. Una clase abstracta puede ser instanciada, pero una interfaz no.;d. Una interfaz puede heredar de múltiples interfaces, mientras que una clase abstracta no puede heredar de múltiples clases.;+a+}
¿Qué es la palabra clave this en Java?-;a. Hace referencia a la instancia actual de la clase.;b. Hace referencia a la instancia de la clase padre.;c. Hace referencia a la instancia de la clase hija.;d. Hace referencia a una instancia de otra clase.;+a+}
¿Cuál es el propósito del método toString() en Java?-;a. Convertir un objeto a una cadena de texto.;b. Convertir una cadena de texto a un objeto.;c. Comparar dos objetos para ver si son iguales.;d. Imprimir el contenido de un objeto en la consola.;+a+}
¿Qué es la serialización en Java?-;a. Convertir un objeto en una secuencia de bytes.;b. Convertir un objeto en una cadena de texto.;c. Convertir una cadena de texto en un objeto.;d. Convertir una secuencia de bytes en un objeto.;+a+}
¿Cuál es la diferencia entre una variable de instancia y una variable de clase en Java?-;a. Una variable de instancia es estática, mientras que una variable de clase no lo es.;b. Una variable de instancia pertenece a la clase, mientras que una variable de clase pertenece a la instancia.;c. Una variable de instancia se declara con la palabra clave static, mientras que una variable de clase no.;d. Una variable de instancia pertenece a la instancia y se declara sin la palabra clave static, mientras que una variable de clase pertenece a la clase y se declara con static.;+d+}
¿Qué es el polimorfismo de compilación (compile-time polymorphism) en Java?-;a. La capacidad de una clase para tener múltiples métodos con el mismo nombre pero con diferentes firmas.;b. La capacidad de una clase para tomar diferentes formas a través de la herencia.;c. La capacidad de un programa para seleccionar el método adecuado en tiempo de ejecución.;d. La capacidad de un compilador para seleccionar el método adecuado en tiempo de compilación.;+d+}
¿Cómo se previene la herencia de una clase en Java?-;a. Declarando la clase como sealed.;b. Declarando la clase como private.;c. Declarando la clase como final.;d. No es posible prevenir la herencia en Java.;+c+}
¿Qué es el manejo de excepciones en Java?-;a. Un mecanismo para evitar errores en tiempo de compilación.;b. Un mecanismo para manejar situaciones impredecibles y errores en tiempo de ejecución.;c. Un mecanismo para convertir excepciones en errores.;d. Un mecanismo para manejar errores en tiempo de compilación.;+b+}
¿Cómo se crea una instancia de una interfaz en Java?-;a. Utilizando el operador new.;b. No es posible crear instancias de interfaces en Java.;c. Implementando la interfaz en una clase y creando una instancia de esa clase.;d. Utilizando el método estático getInstance().;+c+}
¿Cuál es el propósito de la palabra clave super en un constructor?-;a. Hace referencia a la instancia actual de la clase.;b. Invoca al constructor de la clase actual.;c. Invoca al constructor de la clase padre.;d. Hace referencia a la instancia de la clase padre.;+c+}